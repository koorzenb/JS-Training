import {registerEvent, unregisterEvents} from "./utils/system-utils.js";
export class ViewModel {

    constructor() {
        this.init();
        console.log("viewModel started");
        // # You need a provider that deals with the ".bind" syntax on an attribute 
        // DO NOT SEARCH INITIALLY! ASSUME THAT YOU HAVE NAME AND GET MVP
        // - d.qs("div")
        // - iterate thru attributes and find the one that has the ".bind" syntax. If it has the ".bind" syntax, then you need 
        //  - to use the provider to get the value of the attribute.
        // 


        // # and set's that attribute to the value in the context
        // find {{firstName}} 
        // fire "name" as context 
        // You also need a provider to deal with the inner text of a element and replace the "{{property}}" syntax with the actual value.

    }

    dispose() {
        unregisterEvents(addButton, "click");
        delete this.clickHandler;
    }


    /**
     * Generated by CoPilot - see if it works
     */
    findAndReplace(element, context) {
        const text = element.innerText;
        const regex = /{{(.*?)}}/g;
        const matches = text.match(regex);
        if (matches) {
            for (const match of matches) {
                const property = match.replace("{{", "").replace("}}", "");
                const value = context[property];
                element.innerText = text.replace(match, value);
            }
        }
    }



    _name() {
        const context = {
            firstName: "John",
            lastName: "Smith",
            age: 20
        };
    }
}