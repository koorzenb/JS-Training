import {registerEvent, unregisterEvents} from "./utils/system-utils.js";
export class ViewModel {

    constructor() {
        this._init();
        this.locateExpressions(this.div);
        console.log("viewModel started");
        this.data = "piet";
        this.textParser(this.div, this.data);

        // # You need a provider that deals with the ".bind" syntax on an attribute 
        // DO NOT SEARCH INITIALLY! ASSUME THAT YOU HAVE NAME AND GET MVP
        // - iterate thru attributes and find the one that has the ".bind" syntax. If it has the ".bind" syntax, then you need 
        //  - to use the provider to get the value of the attribute.
        // 
        /**
         * 1. Give element
         * 2. iterate thru element.attributes (element.atributes.filter(attr => attr.name.includes(".bind"))). Write to array
         * 3. For each element in array, get the context value (ie "name" in case of data-name.bind) of the attribute
         * 4. build a factory that call provider that will return the value of the context.
         * 5. replace the value of the attribute with the value of the context. (ie data-name="{{name}}"). 
         *    - parser: convert the value of the context to a string. Find instances of {{}} and replace with the value of the context.
         */


        // # and set's that attribute to the value in the context
        // find {{firstName}} 
        // fire "name" as context 
        // You also need a provider to deal with the inner text of a element and replace the "{{property}}" syntax with the actual value.

    }

    locateExpressions(element) {
        const attributes = element.attributes;
        for (const attr of attributes) {
            if (attr.name.includes(".bind")) {
                const context = attr.name.replace(".bind", "");
                this.value = this[context];
            }
        }
    }

    set data(newValue) {
        this._data = {
            firstName: "John",
            lastName: "Smith",
            age: 20
        };
    }

    get data() {
        return this._data;
    }

    dispose() {
        unregisterEvents(addButton, "click");
        delete this.clickHandler;
        delete this.element;
    }

    /**
     * Generated by CoPilot - see if it works
     */
    textParser(element, context) {
        let text = element.innerHTML, newText;
        const regex = /{{(.*?)}}/g;
        const matches = text.match(regex);
        if (matches) {
            for (const match of matches) {
                //query DOM is expensive. find another way
                const property = match.replace("{{", "").replace("}}", "");
                const value = context[property];
                newText = text.replace(match, value);
                text = newText;
                this.div.innerHTML = newText;
            }
        }
    }

    _init() {
        this.div = document.querySelector("div");
        console.log(this.div.attributes);
    }

    _name() {
        const context = {
            firstName: "John",
            lastName: "Smith",
            age: 20
        };
    }
}